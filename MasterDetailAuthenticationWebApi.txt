1. Create three model class named: Product, OrderMaster, OrderDetail
====================================================================
Product class:
---------------------------------------------------------------------
public class Product
    {
        public int ProductId { get; set; }
        public string Name { get; set; }

        public virtual ICollection<OrderDetail> OrderDetails { get; set; }
    }
___________________________________________________________________
OrderMaster Class:
---------------------------------------------------------------------
 public class OrderMaster
    {
        [Key]
        public int OrderId { get; set; }
        public string CustomerName { get; set; }

        public string ImagePath { get; set; }
        [NotMapped]
        public HttpPostedFileBase ImageFile { get; set; }

        public virtual List<OrderDetail> OrderDetail { get; set; } = new List<OrderDetail>();
    }
___________________________________________________________________
OrderDetail Class:
---------------------------------------------------------------------
 public class OrderDetail
    {
        [Key]
        public int DetailId { get; set; }

        public int OrderId { get; set; }
        public OrderMaster OrderMaster { get; set; }
        public int ProductId { get; set; }
        public Product Product { get; set; }

        public int Quantity { get; set; }
        public decimal Price { get; set; }
    }

===================================================================================
2. Create MyDbContext with DbSet and OnModelCreating also install EntityFramework
==================================================================================
MyDbContext Class:

public class MyDbContext:DbContext
    {
        public MyDbContext() : base("DbCon")
        {

        }
        public DbSet<Product> Products { get; set; }
        public DbSet<OrderDetail> OrderDetails { get; set; }
        public DbSet<OrderMaster> OrderMasters { get; set; }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<OrderDetail>()
                .HasRequired(o => o.OrderMaster)
                .WithMany(o => o.OrderDetail)
                .HasForeignKey(o => o.OrderId);
        }
    }
====================================================================
3. Make a connection string wtih attatch db file name in Web.config 
====================================================================
  <connectionStrings>
    <add name="DbCon" connectionString="Data Source=(LocalDb)\MSSQLLocalDB;AttachDbFilename=|DataDirectory|\MasterDetailsAuthentication.mdf;Initial Catalog=MasterDetailsAuthentication;Integrated Security=True" providerName="System.Data.SqlClient" />
  </connectionStrings>
===============================================================
4. Migration From Package Manager Console
=========================================================
5. Take a OrderController empty api controller

Order Controller:

 public class OrderController : ApiController
    {
        private MyDbContext _db = new MyDbContext();

        [System.Web.Http.HttpGet]
        public IHttpActionResult GetOrder()
        {
            var data = _db.OrderMasters.ToList();
            var jsonset = new JsonSerializerSettings()
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
            };
            var serial = JsonConvert.SerializeObject(data, Formatting.None, jsonset);
            var jsonObj = JsonConvert.DeserializeObject(serial);
            return Ok(jsonObj);
        }

        [System.Web.Http.HttpGet]
        public IHttpActionResult GetOrder(int id)
        {
            OrderMaster order = _db.OrderMasters.FirstOrDefault(o => o.OrderId == id);
            var jsonset = new JsonSerializerSettings()
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
            };
            var serial = JsonConvert.SerializeObject(order, Formatting.None, jsonset);
            var jsonObj = JsonConvert.DeserializeObject(serial);
            return Ok(jsonObj);
        }

        [System.Web.Http.HttpPost]
        public IHttpActionResult PostOrder()
        {

            if (ModelState.IsValid)
            {
                var customerName = HttpContext.Current.Request.Form["CustomerName"];
                var order = new OrderMaster()
                {
                    CustomerName = customerName,
                };
                var imageFile = HttpContext.Current.Request.Files["ImageFile"];
                if (imageFile != null)
                {
                    var filename = Guid.NewGuid().ToString() + Path.GetFileName(imageFile.FileName);
                    var path = Path.Combine(HttpContext.Current.Server.MapPath("~/Images"), filename);
                    order.ImagePath = path;
                    imageFile.SaveAs(path);

                    string orderDetailJson = HttpContext.Current.Request.Form["OrderDetail"];
                    if (!string.IsNullOrEmpty(orderDetailJson))
                    {
                        List<OrderDetail> orderDetailList = JsonConvert.DeserializeObject<List<OrderDetail>>(orderDetailJson);
                        order.OrderDetail.AddRange(orderDetailList);
                    }
                }
                _db.OrderMasters.Add(order);
                _db.SaveChanges();
            }
            return Ok();

        }

        [System.Web.Http.HttpPut]
        public IHttpActionResult PutOrder(int id)
        {
            var order = _db.OrderMasters.Include(o => o.OrderDetail).FirstOrDefault(o => o.OrderId == id);
            order.CustomerName = HttpContext.Current.Request.Form["CustomerName"];
            var ImageFile = HttpContext.Current.Request.Files["ImageFile"];
            if (ImageFile != null)
            {
                var filename = Guid.NewGuid().ToString() + Path.GetFileName(ImageFile.FileName);
                var imagepath = Path.Combine(HttpContext.Current.Server.MapPath("~/Images"), filename);
                order.ImagePath = imagepath;
                ImageFile.SaveAs(imagepath);
            }

            string orderDetailJson = HttpContext.Current.Request.Form["OrderDetail"];
            if (!string.IsNullOrEmpty(orderDetailJson))
            {
                List<OrderDetail> orderDetailList = JsonConvert.DeserializeObject<List<OrderDetail>>(orderDetailJson);
                order.OrderDetail.Clear();
                order.OrderDetail.AddRange(orderDetailList);
            }
            _db.Entry(order).State = EntityState.Modified;
            _db.SaveChanges();
            return Ok();
        }

        [System.Web.Http.HttpDelete]
        public IHttpActionResult DeleteOrder(int id)
        {
            var order = _db.OrderMasters.FirstOrDefault(o => o.OrderId == id);
            if (order == null)
            {
                return NotFound();
            }
            _db.OrderMasters.Remove(order);
            _db.SaveChanges();
            return Ok();
        }
    }
================================================
6. Test on PostMan
================================================
7. install followings NuGet packages

Install-Package Microsoft.Owin.Host.SystemWeb
Install-Package Microsoft.Owin.Security.OAuth
Install-Package Microsoft.Owin.Cors
====================================================================
8. take two class Named: MyAuthorizeAttibute & MyAuthorizationServerProvider and take a owin startup class
====================================================================
MyAuthorizeAttibute class:
---------------------------------------------------------------------
    public class MyAuthorizeAttibute:AuthorizeAttribute
    {
        protected override void HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext actionContext)
        {
            if (!HttpContext.Current.User.Identity.IsAuthenticated)
            {
                base.HandleUnauthorizedRequest(actionContext);
            }
            else
            {
                actionContext.Response = new System.Net.Http.HttpResponseMessage(System.Net.HttpStatusCode.Forbidden);
            }
        }
    }
_______________________________________________________________________
MyAuthorizationServerProvider Class:
------------------------------------------------------------------------
 public class MyAuthorizationServerProvider : OAuthAuthorizationServerProvider
    {
        public override async Task ValidateClientAuthentication(OAuthValidateClientAuthenticationContext context)
        {
            context.Validated();
        }

        public override async Task GrantResourceOwnerCredentials(OAuthGrantResourceOwnerCredentialsContext context)
        {
            var identity = new ClaimsIdentity(context.Options.AuthenticationType);
            if (context.UserName == "admin" && context.Password == "admin")
            {
                identity.AddClaim(new Claim(ClaimTypes.Role, "admin"));
                identity.AddClaim(new Claim("username", "admin"));
                identity.AddClaim(new Claim(ClaimTypes.Name, "NVIT"));
                context.Validated(identity);
            }
            else if (context.UserName == "user" && context.Password == "user")
            {
                identity.AddClaim(new Claim(ClaimTypes.Role, "user"));
                identity.AddClaim(new Claim("username", "user"));
                identity.AddClaim(new Claim(ClaimTypes.Name, "IDB"));
                context.Validated(identity);
            }
            else
            {
                context.SetError("invalid_grant", "Provided username and password is incorrect");
                return;
            }
        }
    }
_______________________________________________________________________
Startup Class:
------------------------------------------------------------------------
public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            app.UseCors(Microsoft.Owin.Cors.CorsOptions.AllowAll);

            var myProvider = new MyAuthorizationServerProvider();
            OAuthAuthorizationServerOptions options = new OAuthAuthorizationServerOptions
            {
                AllowInsecureHttp = true,
                TokenEndpointPath = new PathString("/login"),
                AccessTokenExpireTimeSpan = TimeSpan.FromDays(1),
                Provider = myProvider
            };
            app.UseOAuthAuthorizationServer(options);
            app.UseOAuthBearerAuthentication(new OAuthBearerAuthenticationOptions());

            HttpConfiguration config = new HttpConfiguration();
            WebApiConfig.Register(config);
        }
    }
===============================================================================
9. give         [Authorize] attribute befoe order controller
===============================================================================
10. Open PostMan
______________________________________________________________________________________
Token:
-----------------------------------------------------------
POST - http://localhost:2663//login
Body => x-www-form-urlencoded
KEY 				Value
----				------  				
username			admin
password			admin
grant_type			password
---------------------------------------------------------
copy the access_token without quotation.
____________________________________________________________
Get - http://localhost:2663//order
Authorization => Bearer Token => token = paste the access_token
